<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:batch="http://www.springframework.org/schema/batch"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">


    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"
          destroy-method="destroy">
        <property name="corePoolSize" value="5"/>
        <property name="maxPoolSize" value="10"/>
        <property name="queueCapacity" value="30"/>
    </bean>

    <!-- In-Memory Repository -->
    <!--<bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">-->
    <!--<property name="transactionManager" ref="transactionManager"/>-->
    <!--</bean>-->

    <!-- Persist batch metadata in database -->
    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="databaseType" value="MySQL"/>
        <property name="tablePrefix" value="BATCH_"/>
        <property name="isolationLevelForCreate" value="ISOLATION_SERIALIZABLE"/>
    </bean>

    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository"/>
        <property name="taskExecutor" ref="taskExecutor"/>
    </bean>

    <bean id="stepBuilderFactory" class="org.springframework.batch.core.configuration.annotation.StepBuilderFactory">
        <constructor-arg index="0" ref="jobRepository"/>
        <constructor-arg index="1" ref="transactionManager"/>
    </bean>

    <bean id="jobBuilderFactory" class="org.springframework.batch.core.configuration.annotation.JobBuilderFactory">
        <constructor-arg index="0" ref="jobRepository"/>
    </bean>

    <bean id="jobExplorer" class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="jobRegistry" class="org.springframework.batch.core.configuration.support.MapJobRegistry"/>

    <bean id="jobRegistryBeanPostProcessor"
          class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor">
        <property name="jobRegistry" ref="jobRegistry"/>
    </bean>

    <bean id="jobOperator" class="org.springframework.batch.core.launch.support.SimpleJobOperator">
        <property name="jobExplorer" ref="jobExplorer"/>
        <property name="jobRepository" ref="jobRepository"/>
        <property name="jobRegistry" ref="jobRegistry"/>
        <property name="jobLauncher" ref="jobLauncher"/>
    </bean>

    <bean id="runIdIncrementer" class="org.springframework.batch.core.launch.support.RunIdIncrementer"/>


    <!-- ################################################### -->
    <!--                    Job Configuration                -->
    <!-- ################################################### -->

    <batch:job id="abstractJob"
               restartable="true"
               incrementer="runIdIncrementer"
               job-repository="jobRepository" abstract="true">
    </batch:job>

    <batch:step id="abstractStep" abstract="true" job-repository="jobRepository">
        <batch:tasklet transaction-manager="transactionManager" allow-start-if-complete="true">
            <batch:chunk commit-interval="10" skip-limit="10">
                <batch:skippable-exception-classes>
                    <batch:include class="java.lang.Exception"/>
                </batch:skippable-exception-classes>
            </batch:chunk>
            <batch:listeners>
                <batch:listener ref="simpleStepListener"/>
            </batch:listeners>
        </batch:tasklet>
    </batch:step>

    <!-- Step Listener -->
    <bean id="simpleStepListener" class="sun.spring.scheduler.batch.listener.SimpleStepListener"/>

    <!-- Json Item Writer -->
    <bean id="jsonItemWriter" class="sun.spring.scheduler.batch.writer.JsonItemWriter"/>

    <!-- Json Convert Processor -->
    <bean id="jsonConvertProcessor" class="sun.spring.scheduler.batch.processor.JsonConvertProcessor"/>


    <!-- single thread job -->
    <batch:job id="transferPersonToRedisJob" parent="abstractJob">
        <batch:step id="step1" parent="abstractStep">
            <batch:tasklet>
                <batch:chunk writer="jsonItemWriter" processor="jsonConvertProcessor">
                    <batch:reader>
                        <bean class="org.mybatis.spring.batch.MyBatisPagingItemReader">
                            <property name="pageSize" value="1000"/>
                            <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
                            <property name="queryId" value="sun.spring.scheduler.demo.Person.list"/>
                        </bean>
                    </batch:reader>
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>

    <!-- Parallel Processing -->
    <batch:job id="transferDataToRedisJob" parent="abstractJob">
        <batch:split id="split1" task-executor="taskExecutor">
            <batch:flow>
                <batch:step id="stepA" parent="abstractStep">
                    <batch:tasklet>
                        <batch:chunk writer="jsonItemWriter" processor="jsonConvertProcessor">
                            <batch:reader>
                                <bean class="org.mybatis.spring.batch.MyBatisPagingItemReader">
                                    <property name="pageSize" value="1000"/>
                                    <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
                                    <property name="queryId" value="sun.spring.scheduler.demo.Company.list"/>
                                </bean>
                            </batch:reader>
                        </batch:chunk>
                    </batch:tasklet>
                </batch:step>
            </batch:flow>
            <batch:flow>
                <batch:step id="stepB" parent="abstractStep">
                    <batch:tasklet>
                        <batch:chunk writer="jsonItemWriter" processor="jsonConvertProcessor">
                            <batch:reader>
                                <bean class="org.mybatis.spring.batch.MyBatisPagingItemReader">
                                    <property name="pageSize" value="1000"/>
                                    <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
                                    <property name="queryId" value="sun.spring.scheduler.demo.Person.list"/>
                                </bean>
                            </batch:reader>
                        </batch:chunk>
                    </batch:tasklet>
                </batch:step>
            </batch:flow>
        </batch:split>
    </batch:job>


    <!-- ################################################### -->
    <!--    Schedule Batch Jobs Configuration                -->
    <!-- ################################################### -->
    <bean id="launchJobsThreadPool" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"
          destroy-method="destroy">
        <property name="corePoolSize" value="5"/>
        <property name="maxPoolSize" value="10"/>
        <property name="queueCapacity" value="30"/>
    </bean>
    <!-- Batch Job Dispatcher -->
    <bean id="jobDispatcher" class="sun.spring.scheduler.batch.JobDispatcher">
        <property name="scheduleTaskConfig" ref="scheduleTaskConfig"/>
        <property name="events">
            <list>
                <ref bean="demoEvent"/>
            </list>
        </property>
    </bean>

    <bean id="demoEvent" class="sun.spring.scheduler.demo.DemoEvent">
        <property name="trigger" ref="demoTrigger"/>
    </bean>

    <bean id="demoGuard" class="sun.spring.scheduler.demo.DemoGuard"/>

    <bean id="demoTrigger" class="sun.spring.scheduler.demo.DemoTrigger">
        <property name="jobLauncher" ref="jobLauncher"/>
        <property name="threadPoolTaskExecutor" ref="launchJobsThreadPool"/>
        <property name="jobs">
            <map>
                <entry key-ref="transferPersonToRedisJob" value-ref="demoGuard"/>
                <entry key-ref="transferDataToRedisJob" value-ref="demoGuard"/>
            </map>
        </property>
    </bean>

</beans>